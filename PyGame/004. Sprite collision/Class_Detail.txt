To make a game interactive, we need to add many different effects like catchy background effects, collisions, and add sound to the game. So let's see how we can make level up our game with the help of these concepts.

Overview

Topics introduced

Collision Detection
Sprite Images
Activity Explanation
Topics in Details -
Collision Detection
Collision detection is the process of determining when two objects on the screen have touched (or collided). Collision detection in games is quite helpful. If the player, for example, comes into contact with an adversary, they may lose health. Alternatively, if a player touches a coin, it should be instantly picked up. Collision detection can help establish whether the game character is standing on solid ground or floating in space.

 

Collision detection is used in our games to assess whether two rectangles overlap.

 

To check collision detection, we will use sprite_object.colliderect(enemy_object). This function helps you to check if the sprite_object and the enemy_object have collided or not. This is only useful in the case of Rectangular Sprites.

 



Sprite Images - 
You can add an image to the background of your screen. You can scale it as well as per your choice. Example - 



 

Activity Explanation
 Initialization and Setup
import pygame: This line imports the pygame library, which is a set of Python modules designed for writing video games. It provides functionality for handling graphics, sound, input devices, and more.
 

import random: This line imports the random module, which provides functions for generating random numbers.
 

SCREEN_WIDTH, SCREEN_HEIGHT = 500, 400: These lines define two constants, SCREEN_WIDTH and SCREEN_HEIGHT, which represent the dimensions of the game window or screen. In this case, the width is set to 500 pixels and the height to 400 pixels.
 

MOVEMENT_SPEED = 5: This line defines a constant MOVEMENT_SPEED which represents the speed at which game objects will move. In this case, it's set to 5 pixels per frame or iteration.
 

FONT_SIZE = 72: This line defines a constant FONT_SIZE which represents the size of the font that will be used for rendering text in the game. In this case, it's set to 72 points.
 

pygame.init(): This line initializes the Pygame library. It is necessary to call this function before using any other Pygame functions.
 

background_image = pygame.transform.scale(pygame.image.load("bg.jpg"), (SCREEN_WIDTH, SCREEN_HEIGHT)): This line loads an image file named "bg.jpg" from the current directory using pygame.image.load() function, then scales the image to fit the game screen dimensions (defined by SCREEN_WIDTH and SCREEN_HEIGHT) using pygame.transform.scale() function. The resulting surface is assigned to the variable background_image.
 

font = pygame.font.SysFont("Times New Roman", FONT_SIZE): This line loads a font named "Times New Roman" with the specified size (FONT_SIZE) using pygame.font.SysFont() function. The resulting font object is assigned to the variable font, which can be used later for rendering text in the game.


 
Creating a Custom Sprite 
class Sprite(pygame.sprite.Sprite):
This line declares a new class named Sprite that inherits from pygame.sprite.Sprite. Inheritance allows this new Sprite class to use functionality already defined in pygame.sprite.Sprite, such as sprite grouping and collision detection, among others.

 

def __init__(self, color, height, width):
This line defines the constructor method for the Sprite class. It's automatically called when you create a new instance of Sprite. The constructor takes four arguments: self, color, height, and width. self refers to the instance being created, while color, height, and width are parameters used to specify the sprite's appearance and size.

 

super().__init__()
This calls the constructor of the base class (pygame.sprite.Sprite). It's important to initialize the base class properly to ensure that the sprite is set up correctly within Pygame's ecosystem, including registering it with any sprite groups it may be added to.

 

self.image = pygame.Surface([width, height])
This line creates a new Pygame Surface object with the specified width and height. Surfaces are off-screen canvases where you can draw graphics. The self.image attribute is where the sprite's visual representation will be stored. In Pygame, each sprite should have an image attribute for this purpose.

 

self.image.fill(pygame.Color('dodgerblue'
Here, the entire surface area of self.image is filled with a solid color. pygame.Color('dodgerblue') creates a color object representing the color "dodger blue". This sets the background color of the sprite's image.

 

pygame.draw.rect(self.image, color, pygame.Rect(0, 0, width, height))
This function call draws a rectangle onto self.image. The rectangle is drawn with the color specified by the color parameter passed to the __init__ method. The pygame.Rect(0, 0, width, height) argument specifies the rectangle's dimensions and position. In this case, it covers the entire surface, starting from the top-left corner (0,0) with the width and height provided.

 

self.rect = self.image.get_rect()
Finally, this line retrieves a rectangle object that has the same size and position as self.image. This rect is crucial in Pygame for collision detection, positioning, and moving sprites. The self.rect attribute effectively holds the sprite's position on the screen, and Pygame uses this for rendering and interactions.
 
Sprite Movement within Screen Boundaries

 
def move(self, x_change, y_change):
Defines a method for moving the sprite, taking changes in x (horizontal) and y (vertical) positions.

self.rect.x = max(min(self.rect.x + x_change, SCREEN_WIDTH - self.rect.width), 0)
Updates the sprite's x-coordinate. It adds x_change to the current x-coordinate, but doesn't allow it to go beyond the screen's left (0) or right (minus the sprite's width) edges.
 

self.rect.y = max(min(self.rect.y + y_change, SCREEN_HEIGHT - self.rect.height), 0)
Updates the sprite's y-coordinate in a similar manner, ensuring the sprite doesn't move outside the top (0) or bottom (minus the sprite's height) of the screen.

 

initializing Game Window and Randomly Positioned Sprite
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
Initializes the game window with dimensions defined by SCREEN_WIDTH and SCREEN_HEIGHT.
 

pygame.display.set_caption("Sprite Collision")
Sets the title of the game window to "Sprite Collision".
 

all_sprites = pygame.sprite.Group()
Creates a Pygame sprite group called all_sprites. This is a container that will hold all the sprite objects for easy management and drawing.

 

sprite1 = Sprite(pygame.Color('black'), 20, 30)
Creates an instance of the Sprite class (defined earlier) with a black color, height of 20 pixels, and width of 30 pixels.
 

sprite1.rect.x, sprite1.rect.y = random.randint(0, SCREEN_WIDTH - sprite1.rect.width), random.randint(0, SCREEN_HEIGHT - sprite1.rect.height)
Positions sprite1 at a random location within the game window. The rect.x and rect.y properties are set to random values that ensure the sprite is fully visible within the screen. It subtracts the sprite's dimensions from the screen's dimensions to avoid placing the sprite partially outside the screen boundaries.
 

all_sprites.add(sprite1)
Adds sprite1 to the all_sprites group for centralized management. This makes it easier to draw all sprites with a single call and apply group-based operations like collision checks.

 

setting Up Game Loop Control Variables
running, won = True, False
running is a boolean variable set to True and used to keep the game loop running. It typically controls the main loop, and setting it to False exits the game.
 

won is another boolean variable, initialized to False. It can be used to track the player's win condition. If your game involves a winning scenario, this variable could be set to True once the player meets the winning criteria, influencing game flow or display messages.
 
clock = pygame.time.Clock()
clock is an instance of Pygame's Clock class. It's used to control the game's framerate, ensuring that the game runs at the same speed on all hardware. You can use clock.tick(fps) within the game loop to specify the maximum number of frames per second (FPS) the game should run at, making game animations smoother and controlling the speed of game events.
 

Game Loop: Event Handling, Movement, and Collision Detection
Main Game Loop
while running: This is the start of the main game loop, which will continue to run as long as the running variable is True. It's the heart of most games, where events are checked, game states are updated, and graphics are redrawn.
 
Event Handling
for event in pygame.event.get(): This loops through all the events that Pygame has gathered from the system. Events include user inputs like keyboard presses, mouse movements, or the window being closed.
 
if event.type == pygame.QUIT or (event.type == pygame.KEYDOWN and event.key == pygame.K_x): Checks if the user has requested the game to quit by closing the window (pygame.QUIT) or by pressing the 'X' key (pygame.K_x). If either condition is true, it sets running to False, which will end the game loop.
 
Movement and Game Logic
if not won: This checks if the player has not yet won the game (won is False). If the player has not won, the game will process movement and collision detection.
 
keys = pygame.key.get_pressed(): Gets the state of all keyboard buttons. It returns a sequence with the state (True or False) of every key.
 
x_change = (keys[pygame.K_RIGHT] -keys[pygame.K_LEFT]) * MOVEMENT_SPEED : Calculates how much to move the sprite horizontally. If the right arrow key is pressed (pygame.K_RIGHT), it increases x_change; if the left arrow key is pressed (pygame.K_LEFT), it decreases x_change. MOVEMENT_SPEED scales the change.
 
y_change = (keys[pygame.K_DOWN] - keys[pygame.K_UP]) * MOVEMENT_SPEED : Similar to x_change, but for vertical movement. Down arrow increases y_change, and up arrow decreases it, scaled by MOVEMENT_SPEED.
 
sprite1.move(x_change, y_change) : Calls the move method of sprite1 with the calculated x_change and y_change to update its position.
 
Collision Detection and Winning Condition
if sprite1.rect.colliderect(sprite2.rect): Checks if sprite1 has collided with sprite2 by checking their rectangular areas for overlap.
 
all_sprites.remove(sprite2): If a collision is detected, sprite2 is removed from the all_sprites group, possibly to simulate that sprite1 has "captured" or interacted with sprite2 in some way.
 
won = True : Sets the won variable to True, indicating that the player has met the condition to win the game.
 
Rendering Graphics and Displaying Win Message
Drawing
screen.blit(background_image, (0, 0)) : This line draws the background_image onto the screen at the top-left corner (coordinates (0, 0)). The blit method is Pygame's way of copying the contents of one Surface onto another, in this case, rendering the background image onto the game window.
 
Sprites Drawing
all_sprites.draw(screen) : This command draws all the sprites contained in the all_sprites group onto the screen. Pygame's sprite groups have a draw method that iterates over each sprite in the group and draws its image attribute onto the specified surface (here, the game window).
 
Display Win Message
if won: Checks if the won variable is True, indicating that the player has met the win condition.
 
win_text = font.render("You win!", True, pygame.Color('black')) : If the player has won, this line creates a Surface with the text "You win!" rendered on it. The text is rendered in black (pygame.Color('black')). The True argument enables anti-aliasing, making the text smoother.
 
screen.blit(win_text, ((SCREEN_WIDTH - win_text.get_width()) // 2, (SCREEN_HEIGHT - win_text.get_height()) // 2)) : This line draws the win_text Surface onto the screen, positioning it at the center. It calculates the position by subtracting the width and height of win_text from SCREEN_WIDTH and SCREEN_HEIGHT, respectively, and dividing each by 2.
 
Refresh Screen and Control Frame Rate
pygame.display.flip(): Updates the entire screen with everything that's been drawn since the last flip. Essentially, it makes all the changes visible to the player.
 
clock.tick(90):This line limits the game's frame rate to 90 frames per second (FPS). clock.tick(90) pauses the game loop to ensure that at most 90 cycles are processed every second, making the game run at a consistent speed across different hardware.
Exiting Pygame
pygame.quit() :This is called after the game loop ends (when running is set to False). It uninitializes all Pygame modules, cleanly exiting the program.